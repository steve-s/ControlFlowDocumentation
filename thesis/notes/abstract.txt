Dynamic programming languages allow to write code without type 
information and the type of variables can dynamically 
change during execution, which can be easier to use 
and suitable for fast prototyping, but at the same time 
can lead to error prone code, difficult maintenance 
and is challenging for the compilers or interpreters.

Programmers often use documentation comments to provide 
the type information. However, the correspondence of the 
documentation and the actual code is usually not checked 
by the tools.

In this thesis, we focus on one of the most popular dynamic 
programming languages: PHP. We have developed a framework 
for static analysis of PHP code as a part of the Phalanger project -- 
the PHP to .NET compiler. The framework supports any type of analysis, 
but in particular, we implemented type inference analysis with emphasis 
on discovery of possible type related errors and mismatches between 
the type documentation and the actual code.

We used a modular approach to static analysis of PHP applications, 
which is different to most of the other tools of this kind. 
The implementation was evaluated on real PHP applications and 
discovered several real errors and documentation mismatches with a good 
ratio of false positives.